
Home
Java: Multi-threading and Concurrency Simplified
Your progress
Notes - Deadlocks and solution with lock sequencing
Deadlock -

Two threads are said to be in a deadlock when both the threads are circularly waiting for a lock over the object and hence they both get into a situation where they can not proceed with the execution.

Assume that for a writer to write lock should be acquired on both the Book and the Pen. And also assume there is only one instance of the book and the pen is available. In that case assume that writer1 acquires lock over the book object and writer 2 acquires lock over the pen object. Now writer1 is waiting for the pen and writer2 is waiting for the book, and they both are deadlocked.
Simulated Example -

    class Writer1 extends Thread {
    	
        Object book;
        Object pen;
    	
        public Writer1(Object book, Object pen) {
    	this.book = book;
    	this.pen = pen;
        }
    	
        @Override
        public void run() {
    		
    	synchronized(book) {
    	    try { Thread.sleep(10); } catch(Exception e) {}
    	    synchronized(pen) {
    		System.out.println("Writer1 writing");
    	    }
    	}	
        }
    }
     
    class Writer2 extends Thread {
    	
        Object book;
        Object pen;
    	
        public Writer2(Object book, Object pen) {
    	this.book = book;
    	this.pen = pen;
        }
    	
        @Override
        public void run() {
    		
    	synchronized(pen) {
    	    try { Thread.sleep(10); } catch(Exception e) {}
    	    synchronized(book) {
    		System.out.println("Writer2 writing");
    	    }
    	}	
        }
    }
     
    public class Main {
     
        public static void main(String[] args) {	
    	Object book = new Object();
    	Object pen = new Object();
    		
    	new Writer1(book, pen).start();
    	new Writer2(book, pen).start();
    		
    	System.out.println("Main is done");
        }
    }

Solution -

Lock sequencing is one possible solution for deadlock avoidance. Adjust the lock sequence for Writer2

     @Override
     public void run() {
        synchronized(book) {
            try { Thread.sleep(10); } catch(Exception e) {}
    	synchronized(pen) {
    	    System.out.println("Writer2 writing");
    	}
        }	
     }

